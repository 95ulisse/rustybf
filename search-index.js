var N=null,E="",T="t",U="u",searchIndex={};
var R=["rustybf::error","rustybf","position","rustybf::parser","rustybf::parser::Instruction","offset","amount","brainfuckerror","rustybf::optimizer","instruction","optimizer","interpreter","interpreterbuilder","compiler","result","Dumps the currently compiled instructions as LLVM IR to…","try_from","try_into","borrow_mut","to_owned","clone_into","to_string","type_id","borrow","typeid","rustybf::optimizer::passes","rustybf::interpreter","rustybf::compiler","collapseincrements","deadcode","clearloops","mulloops","formatter","initialize","BrainfuckError","Position","Instruction","Optimizer","InterpreterBuilder","Interpreter","Compiler","CompiledProgram","ALL_OPTIMIZATIONS","DEFAULT_OPTIMIZATION_PASSES","CollapseIncrements","DeadCode","ClearLoops","MulLoops"];

searchIndex["rustybf"]={"doc":E,"i":[[0,"error",R[1],E,N,N],[4,R[34],R[0],E,N,N],[13,"Message",E,"Generic message",0,N],[13,"IoError",E,"I/O error.",0,N],[13,"ParseError",E,"Error while parsing.",0,N],[12,"message","rustybf::error::BrainfuckError",E,0,N],[12,R[2],E,E,0,N],[13,"UnknownOptimizationPass",R[0],"Unknown optimization pass.",0,N],[13,"TapeUnderflow",E,"The data pointer underflowed the available tape.",0,N],[13,"TapeOverflow",E,"The data pointer overflowed the available tape.",0,N],[0,"parser",R[1],E,N,N],[3,R[35],R[3],"Position range to track instructions back to source code.…",N,N],[12,"start",E,E,1,N],[12,"end",E,E,1,N],[4,R[36],E,"A single Brainfuck instruction.",N,N],[13,"Add",E,E,2,N],[12,R[6],R[4],E,2,N],[12,R[2],E,E,2,N],[13,"Move",R[3],E,2,N],[12,R[5],R[4],E,2,N],[12,R[2],E,E,2,N],[13,"Input",R[3],E,2,N],[12,R[2],R[4],E,2,N],[13,"Output",R[3],E,2,N],[12,R[2],R[4],E,2,N],[13,"Loop",R[3],E,2,N],[12,"body",R[4],E,2,N],[12,R[2],E,E,2,N],[13,"Clear",R[3],E,2,N],[12,R[2],R[4],E,2,N],[13,"Mul",R[3],E,2,N],[12,R[5],R[4],E,2,N],[12,R[6],E,E,2,N],[12,R[2],E,E,2,N],[5,"parse",R[3],"Parses a Brainfuck program from the given stream.",N,[[],[[R[14],["vec",R[7]]],["vec",[R[9]]],[R[7]]]]],[11,"merge",E,"Merges two positions into one.",1,[[[R[2]],["self"]],[R[2]]]],[11,R[2],E,"Returns the position of this instruction in the source code.",2,[[["self"]],[R[2]]]],[11,"is_loop",E,"Returns `true` if the instruction represents a Brainfuck…",2,[[["self"]],["bool"]]],[11,"clears_current_cell",E,"Returns a value indicating whether this instruction sets…",2,[[["self"]],["bool"]]],[0,R[10],R[1],E,N,N],[3,R[37],R[8],"Brainfuck IR optimizer.",N,N],[3,R[42],E,"`HashMap` containing all the registered optimization passes.",N,N],[3,R[43],E,"Order of the default optimizaiton passes.",N,N],[0,"passes",E,E,N,N],[3,R[44],R[25],E,N,N],[3,R[45],E,E,N,N],[3,R[46],E,E,N,N],[3,R[47],E,E,N,N],[8,"Pass",R[8],"An optimization pass.",N,N],[10,"name",E,"Name of the pass.",3,[[["self"]],["str"]]],[10,"run",E,"Executes the pass on the given set of instructions.…",3,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[11,"with_passes",E,"Constructs a new optimizer with the given set of passes.",4,[[["vec",["arc"]],["arc",["pass"]]],[R[10]]]],[11,"with_passes_str",E,"Constructs a new optimizer with the given set of passes.…",4,[[["str"]],[[R[14],[R[10],R[7]]],[R[10]],[R[7]]]]],[11,"passes",E,"Returns a slice containing the passes configured for this…",4,[[["self"]]]],[11,"run",E,"Runs all the passes on the given set of instructions",4,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[0,R[11],R[1],E,N,N],[3,R[38],R[26],"Builder for the `Interpreter` struct.",N,N],[3,R[39],E,"Main entrypoint of the Brainfuck interpreter. This…",N,N],[11,"new",E,"Creates a new `InterpreterBuilder` with the default…",5,[[],[R[12]]]],[11,"tape_size",E,"Sets the maximum tape size. Panics if the size is set to…",5,[[["self"],["usize"]],["self"]]],[11,"input",E,"Sets the stream that will be used as input for the `,`…",5,[[["self"],["r"]],["self"]]],[11,"output",E,"Sets the stream that will be used as output for the `.`…",5,[[["self"],["w"]],["self"]]],[11,"build",E,"Builds the actual `Interpreter`.",5,[[["self"]],[R[11]]]],[11,"new",E,"Builds an `Interpreter` with the default settings.",6,[[],[R[11]]]],[11,"builder",E,"Creates an `InterpreterBuilder` to configure a new…",6,[[],[R[12]]]],[11,"tape",E,"Returns a reference to the underlying tape used by this…",6,[[["self"]]]],[11,"tape_position",E,"Returns the position of the data pointer on the tape.",6,[[["self"]],["usize"]]],[11,"input",E,"Returns a reference to the input stream used by this…",6,[[["self"]],[["option"],["r"]]]],[11,"output",E,"Returns a reference to the output stream used by this…",6,[[["self"]],[["option"],["w"]]]],[11,"run",E,"Executes the given set of instructions in this…",6,[[["self"]],[[R[14],[R[7]]],[R[7]]]]],[0,R[13],R[1],E,N,N],[3,R[40],R[27],"Compiler from Brainfuck to native code.",N,N],[3,R[41],E,"Compiled Brainfuck program, ready to be JITed or saved to…",N,N],[11,"new",E,"Creates a new compiler with the given optimization level.…",7,[[["u32"]],[R[13]]]],[11,"compile_instructions",E,"Compiles the given instructions. This method can be called…",7,[[],["self"]]],[11,"finish",E,"Finishes the streaming compilation.",7,[[],["compiledprogram"]]],[11,"dump",E,R[15],7,[[["self"]],[[R[14],[R[7]]],[R[7]]]]],[11,"run",E,"Executes the compiled program.",8,[[["self"]]]],[11,"save_object",E,"Saves the compiled program on disk as an object file.",8,[[["path"],["self"],["asref",["path"]]],[[R[14],[R[7]]],[R[7]]]]],[11,"save_executable",E,"Saves the compiled program on disk as an executable.",8,[[["path"],["self"],["asref",["path"]]],[[R[14],[R[7]]],[R[7]]]]],[11,"dump",E,R[15],8,[[["self"]],[[R[14],[R[7]]],[R[7]]]]],[11,"into",R[0],E,0,[[],[U]]],[11,R[21],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[16],E,E,0,[[[U]],[R[14]]]],[11,R[17],E,E,0,[[],[R[14]]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[24]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,R[19],R[3],E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[16],E,E,1,[[[U]],[R[14]]]],[11,R[17],E,E,1,[[],[R[14]]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[24]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[["self"]],["string"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[16],E,E,2,[[[U]],[R[14]]]],[11,R[17],E,E,2,[[],[R[14]]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[24]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"into",R[8],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[16],E,E,4,[[[U]],[R[14]]]],[11,R[17],E,E,4,[[],[R[14]]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[24]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[16],E,E,9,[[[U]],[R[14]]]],[11,R[17],E,E,9,[[],[R[14]]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[R[24]]]],[11,"vzip",E,E,9,[[],["v"]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[16],E,E,10,[[[U]],[R[14]]]],[11,R[17],E,E,10,[[],[R[14]]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[R[24]]]],[11,"vzip",E,E,10,[[],["v"]]],[11,R[19],R[25],E,11,[[["self"]],[T]]],[11,R[20],E,E,11,[[[T],["self"]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[16],E,E,11,[[[U]],[R[14]]]],[11,R[17],E,E,11,[[],[R[14]]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[R[24]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,R[19],E,E,12,[[["self"]],[T]]],[11,R[20],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[16],E,E,12,[[[U]],[R[14]]]],[11,R[17],E,E,12,[[],[R[14]]]],[11,R[18],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[R[24]]]],[11,"vzip",E,E,12,[[],["v"]]],[11,R[19],E,E,13,[[["self"]],[T]]],[11,R[20],E,E,13,[[[T],["self"]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[16],E,E,13,[[[U]],[R[14]]]],[11,R[17],E,E,13,[[],[R[14]]]],[11,R[18],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[R[24]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,R[19],E,E,14,[[["self"]],[T]]],[11,R[20],E,E,14,[[[T],["self"]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[16],E,E,14,[[[U]],[R[14]]]],[11,R[17],E,E,14,[[],[R[14]]]],[11,R[18],E,E,14,[[["self"]],[T]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[R[24]]]],[11,"vzip",E,E,14,[[],["v"]]],[11,"into",R[26],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[16],E,E,5,[[[U]],[R[14]]]],[11,R[17],E,E,5,[[],[R[14]]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[24]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[16],E,E,6,[[[U]],[R[14]]]],[11,R[17],E,E,6,[[],[R[14]]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[24]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,"into",R[27],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[16],E,E,7,[[[U]],[R[14]]]],[11,R[17],E,E,7,[[],[R[14]]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[R[24]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[16],E,E,8,[[[U]],[R[14]]]],[11,R[17],E,E,8,[[],[R[14]]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[R[24]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,"name",R[25],E,11,[[["self"]],["str"]]],[11,"run",E,E,11,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[11,"name",E,E,12,[[["self"]],["str"]]],[11,"run",E,E,12,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[11,"name",E,E,13,[[["self"]],["str"]]],[11,"run",E,E,13,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[11,"name",E,E,14,[[["self"]],["str"]]],[11,"run",E,E,14,[[["self"],[R[9]],["vec",[R[9]]]],[[R[9]],["vec",[R[9]]]]]],[11,"eq",R[3],E,1,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[9]]],["bool"]]],[11,"eq",R[25],E,11,[[["self"],[R[28]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[29]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,14,[[["self"],[R[31]]],["bool"]]],[11,"default",R[26],E,5,[[],["self"]]],[11,"default",E,E,6,[[],["self"]]],[11,"from",R[0],E,0,[[["str"]],["self"]]],[11,"from",E,E,0,[[["string"]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,"from",R[3],E,1,[[["usize"]],["self"]]],[11,"clone",E,E,1,[[["self"]],[R[2]]]],[11,"clone",E,E,2,[[["self"]],[R[9]]]],[11,"clone",R[25],E,11,[[["self"]],[R[28]]]],[11,"clone",E,E,12,[[["self"]],[R[29]]]],[11,"clone",E,E,13,[[["self"]],[R[30]]]],[11,"clone",E,E,14,[[["self"]],[R[31]]]],[11,"deref",R[8],E,9,[[["self"]],["hashmap"]]],[11,"deref",E,E,10,[[["self"]],["vec"]]],[11,"fmt",R[0],E,0,[[[R[32]],["self"]],[R[14]]]],[11,"fmt",R[3],E,2,[[[R[32]],["self"]],[R[14]]]],[11,"fmt",R[0],E,0,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",R[3],E,1,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",E,E,2,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",R[25],E,11,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",E,E,12,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",E,E,13,[[["self"],[R[32]]],[R[14]]]],[11,"fmt",E,E,14,[[["self"],[R[32]]],[R[14]]]],[11,R[33],R[8],E,9,[[["self"]]]],[11,R[33],E,E,10,[[["self"]]]]],"p":[[4,R[34]],[3,R[35]],[4,R[36]],[8,"Pass"],[3,R[37]],[3,R[38]],[3,R[39]],[3,R[40]],[3,R[41]],[3,R[42]],[3,R[43]],[3,R[44]],[3,R[45]],[3,R[46]],[3,R[47]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);